게임오브젝트: 게임(씬)공간에 존재하는 모든 물체
씬: 게임오브젝트를 모아 놓고 장면을 구성하는 것.
하이라키(계층구조): 공간에 관련성있는 게임오브젝트를 모아 놓은것.
※Object: 객체(클래스,메모리,유니티,게임오브젝트 용어따라 조금씩 해석이 달라질수있다)
Transform(변형): 공간상에 물체의 좌표나 회전, 크기정보를 담고있다. <-> 행렬(월드공간)
컴포넌트: 게임오브젝트에 필요한 기능을 추가하는데 사용함.
스크립트: 여러 컴포넌트의 기능을 실행중(런타임==동적) 유기적으로 작동가능하도록 코드를 작성한다.
		컴포넌트의 내용을 실시간으로 변경할 코드를 작성할수있다.
※메모리할당(C/C++): 동적-프로그램 실행중 메모리를 할당, 정적-프로그램 컴파일전에 메모리를 할당이 지정되는것. 프로그램 종료전에 동적할당된 메모리는 삭제해야한다.(스마트포인터)
※게임오브젝트 할당(유니티): 동적-프로그램 실행중 게임오브젝트(컴포넌트)를 할당/정적: 프로그램 컴파일전에 게임오브젝트(컴포넌트)를 할당이 지정되는것. 동적할당된 게임오브젝트는 삭제해야한다.
※동적할당(C#): 클래스의 객체(포인터)에 클래스인스턴스(메모리)는 반드시 동적할당되므로 객체에 인스턴스를 전달하므로 참조가 된다.
※정적할당(C#): 구조체는 적정할당이다. 그러므로 객체가 복사된다. 구조체에 new는 생성자의 호출이다. 동적할당이 아님.
※유니티 생명주기: 해당함수가 호출되는 메세지에서 특정처리를 맡길수있음. 그러나 객체가 많고, 관리가 어려운 경우 게임관리자를 이용하여 처리하는것이 더 확실하다.
※유니티와 상속: 상속은 유니티 내부에서 콜백함수를  구현할때 주로 활용된다. 대표적인 예로 MonoBehaviour에 생명주기 함수들이 여기에 포함된다.
※MonoBehaviour를 통해 스크립트내부에 자식 내에 있는 생명주기 함수들의 내용으로 변경이 가능한것이다.
※가상함수는 vptr(가상함수테이블)을 이용하므로 근본적으로는 함수포인터와 원리가 같다.ex)WinAPI - WinProc, MFC-가상함수를 이용하여 이벤트처리를함.
※인스펙터에서 컴포넌트의 기능을 활용하려 변경하게 하더라도 게임을 만들수있다. 다만 유니티에서 제공되지않는 기능을 만들거나 활용할수없다. 그러므로 엔진만 활용하는 수준은 이정도면된다.
※컴포넌트나 유니티의 기능만 가지고 제어가 불가능한 것도 작성하여 만들수 있어야한다.
중력? -> 지구가 끌어당기는 힘 G
※기획: 유저를 유도하여 재미를 줄수있는것.
